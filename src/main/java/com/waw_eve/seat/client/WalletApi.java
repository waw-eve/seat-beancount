/*
 * SeAT API
 * SeAT API Documentation. All endpoints require an API key.
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.waw_eve.seat.client;

import com.waw_eve.seat.client.invoker.ApiCallback;
import com.waw_eve.seat.client.invoker.ApiClient;
import com.waw_eve.seat.client.invoker.ApiException;
import com.waw_eve.seat.client.invoker.ApiResponse;
import com.waw_eve.seat.client.invoker.Configuration;
import com.waw_eve.seat.client.invoker.Pair;
import com.waw_eve.seat.client.invoker.ProgressRequestBody;
import com.waw_eve.seat.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.waw_eve.seat.client.model.InlineResponse20017;
import com.waw_eve.seat.client.model.InlineResponse20026;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WalletApi {
    private ApiClient apiClient;

    public WalletApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WalletApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for seatApiHttpControllersApiv2CharacterControllerGetWalletJournal
     * @param characterId Character id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call seatApiHttpControllersApiv2CharacterControllerGetWalletJournalCall(Integer characterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/character/wallet-journal/{character_id}"
            .replaceAll("\\{" + "character_id" + "\\}", apiClient.escapeString(characterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call seatApiHttpControllersApiv2CharacterControllerGetWalletJournalValidateBeforeCall(Integer characterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'characterId' is set
        if (characterId == null) {
            throw new ApiException("Missing the required parameter 'characterId' when calling seatApiHttpControllersApiv2CharacterControllerGetWalletJournal(Async)");
        }
        
        com.squareup.okhttp.Call call = seatApiHttpControllersApiv2CharacterControllerGetWalletJournalCall(characterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a paginated wallet journal for a character
     * Returns a wallet journal
     * @param characterId Character id (required)
     * @return InlineResponse20017
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20017 seatApiHttpControllersApiv2CharacterControllerGetWalletJournal(Integer characterId) throws ApiException {
        ApiResponse<InlineResponse20017> resp = seatApiHttpControllersApiv2CharacterControllerGetWalletJournalWithHttpInfo(characterId);
        return resp.getData();
    }

    /**
     * Get a paginated wallet journal for a character
     * Returns a wallet journal
     * @param characterId Character id (required)
     * @return ApiResponse&lt;InlineResponse20017&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20017> seatApiHttpControllersApiv2CharacterControllerGetWalletJournalWithHttpInfo(Integer characterId) throws ApiException {
        com.squareup.okhttp.Call call = seatApiHttpControllersApiv2CharacterControllerGetWalletJournalValidateBeforeCall(characterId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20017>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a paginated wallet journal for a character (asynchronously)
     * Returns a wallet journal
     * @param characterId Character id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call seatApiHttpControllersApiv2CharacterControllerGetWalletJournalAsync(Integer characterId, final ApiCallback<InlineResponse20017> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = seatApiHttpControllersApiv2CharacterControllerGetWalletJournalValidateBeforeCall(characterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20017>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for seatApiHttpControllersApiv2CorporationControllerGetWalletJournal
     * @param corporationId Corporation id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call seatApiHttpControllersApiv2CorporationControllerGetWalletJournalCall(Integer corporationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/corporation/wallet-journal/{corporation_id}"
            .replaceAll("\\{" + "corporation_id" + "\\}", apiClient.escapeString(corporationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call seatApiHttpControllersApiv2CorporationControllerGetWalletJournalValidateBeforeCall(Integer corporationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'corporationId' is set
        if (corporationId == null) {
            throw new ApiException("Missing the required parameter 'corporationId' when calling seatApiHttpControllersApiv2CorporationControllerGetWalletJournal(Async)");
        }
        
        com.squareup.okhttp.Call call = seatApiHttpControllersApiv2CorporationControllerGetWalletJournalCall(corporationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a paginated wallet journal for a corporation
     * Returns a wallet journal
     * @param corporationId Corporation id (required)
     * @return InlineResponse20026
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse20026 seatApiHttpControllersApiv2CorporationControllerGetWalletJournal(Integer corporationId) throws ApiException {
        ApiResponse<InlineResponse20026> resp = seatApiHttpControllersApiv2CorporationControllerGetWalletJournalWithHttpInfo(corporationId);
        return resp.getData();
    }

    /**
     * Get a paginated wallet journal for a corporation
     * Returns a wallet journal
     * @param corporationId Corporation id (required)
     * @return ApiResponse&lt;InlineResponse20026&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse20026> seatApiHttpControllersApiv2CorporationControllerGetWalletJournalWithHttpInfo(Integer corporationId) throws ApiException {
        com.squareup.okhttp.Call call = seatApiHttpControllersApiv2CorporationControllerGetWalletJournalValidateBeforeCall(corporationId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20026>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a paginated wallet journal for a corporation (asynchronously)
     * Returns a wallet journal
     * @param corporationId Corporation id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call seatApiHttpControllersApiv2CorporationControllerGetWalletJournalAsync(Integer corporationId, final ApiCallback<InlineResponse20026> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = seatApiHttpControllersApiv2CorporationControllerGetWalletJournalValidateBeforeCall(corporationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20026>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    
}
